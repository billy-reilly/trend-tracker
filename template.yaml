AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: A RESTful API for tracking lists of trending items.
Resources:
  ########################
  # DynamoDB tables:
  ########################

  TrendListConfigs:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        "Fn::Join":
          - "-"
          - - Ref: AWS::StackName
            - TrendListConfigs
      AttributeDefinitions:
        - AttributeName: trendListId
          AttributeType: S
      KeySchema:
        - AttributeName: trendListId
          KeyType: HASH
      # Note, I'm using the on demand billing mode
      # If you have a steady workload you should switch to PROVISIONED:
      BillingMode: PAY_PER_REQUEST

  InteractionCounts:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        "Fn::Join":
          - "-"
          - - Ref: AWS::StackName
            - InteractionCounts
      AttributeDefinitions:
        - AttributeName: trendListId
          AttributeType: S
        - AttributeName: itemId
          AttributeType: S
        - AttributeName: interactionCount
          AttributeType: N
      KeySchema:
        - AttributeName: trendListId
          KeyType: HASH
        - AttributeName: itemId
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: trendListId-interactionCount-index
          KeySchema:
            - AttributeName: trendListId
              KeyType: HASH
            - AttributeName: interactionCount
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
      # Note, I'm using the on demand billing mode
      # If you have a steady workload you should switch to PROVISIONED:
      BillingMode: PAY_PER_REQUEST

  Interactions:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        "Fn::Join":
          - "-"
          - - Ref: AWS::StackName
            - Interactions
      AttributeDefinitions:
        - AttributeName: itemId
          AttributeType: S
        - AttributeName: expirationTimestamp
          AttributeType: N
      KeySchema:
        - AttributeName: itemId
          KeyType: HASH
        - AttributeName: expirationTimestamp
          KeyType: RANGE
      # Note, I'm using the on demand billing mode
      # If you have a steady workload you should switch to PROVISIONED:
      BillingMode: PAY_PER_REQUEST

  ########################
  # Lambda functions:
  ########################

  TrendListConfigsSeeder:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        "Fn::Join":
          - "-"
          - - Ref: AWS::StackName
            - TrendListConfigsSeeder
      Handler: TrendListConfigsSeeder-bundle.handler
      Runtime: nodejs10.x
      CodeUri: ./dist/TrendListConfigsSeeder-bundle.js
      Description: Custom resource for seeding the config table when the stack is created
      Timeout: 60
      Environment:
        Variables:
          STACK_NAME:
            Ref: AWS::StackName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:PutItem"
              Resource:
                "Fn::Join":
                  - ""
                  - - "arn:aws:dynamodb:"
                    - Ref: "AWS::Region"
                    - ":"
                    - Ref: "AWS::AccountId"
                    - ":table/"
                    - Ref: AWS::StackName
                    - "-TrendListConfigs"

  GetTrendingItems:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        "Fn::Join":
          - "-"
          - - Ref: AWS::StackName
            - GetTrendingItems
      Handler: GetTrendingItems-bundle.handler
      Runtime: nodejs10.x
      CodeUri: ./dist/GetTrendingItems-bundle.js
      Description: Handler for getting a list of trending items
      Events:
        GetTrendingItemsAPI:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RequestParameters:
              method.request.querystring.trendListId:
                Required: true
      Tracing: Active
      Environment:
        Variables:
          STACK_NAME:
            Ref: AWS::StackName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:Query"
              Resource:
                "Fn::Join":
                  - ""
                  - - "arn:aws:dynamodb:"
                    - Ref: "AWS::Region"
                    - ":"
                    - Ref: "AWS::AccountId"
                    - ":table/"
                    - Ref: AWS::StackName
                    - "-InteractionCounts/index/trendListId-interactionCount-index"
            - Effect: Allow
              Action:
                - "dynamodb:GetItem"
              Resource:
                "Fn::Join":
                  - ""
                  - - "arn:aws:dynamodb:"
                    - Ref: "AWS::Region"
                    - ":"
                    - Ref: "AWS::AccountId"
                    - ":table/"
                    - Ref: AWS::StackName
                    - "-TrendListConfigs"

  RecordInteraction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        "Fn::Join":
          - "-"
          - - Ref: AWS::StackName
            - RecordInteraction
      Handler: RecordInteraction-bundle.handler
      Runtime: nodejs10.x
      CodeUri: ./dist/RecordInteraction-bundle.js
      Description: Handler for recording an user's interaction with an item
      Timeout: 6
      Events:
        RecordInteractionAPI:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RequestParameters:
              method.request.querystring.trendListId:
                Required: true
      Tracing: Active
      Environment:
        Variables:
          STACK_NAME:
            Ref: AWS::StackName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:PutItem"
              Resource:
                "Fn::Join":
                  - ""
                  - - "arn:aws:dynamodb:"
                    - Ref: "AWS::Region"
                    - ":"
                    - Ref: "AWS::AccountId"
                    - ":table/"
                    - Ref: AWS::StackName
                    - "-Interactions"
            - Effect: Allow
              Action:
                - "dynamodb:UpdateItem"
              Resource:
                "Fn::Join":
                  - ""
                  - - "arn:aws:dynamodb:"
                    - Ref: "AWS::Region"
                    - ":"
                    - Ref: "AWS::AccountId"
                    - ":table/"
                    - Ref: AWS::StackName
                    - "-InteractionCounts"
            - Effect: Allow
              Action:
                - "lambda:InvokeFunction"
              Resource:
                "Fn::Join":
                  - ""
                  - - "arn:aws:lambda:"
                    - Ref: "AWS::Region"
                    - ":"
                    - Ref: "AWS::AccountId"
                    - ":function:"
                    - Ref: AWS::StackName
                    - "-GetTrendingItems"
            - Effect: Allow
              Action:
                - "dynamodb:GetItem"
              Resource:
                "Fn::Join":
                  - ""
                  - - "arn:aws:dynamodb:"
                    - Ref: "AWS::Region"
                    - ":"
                    - Ref: "AWS::AccountId"
                    - ":table/"
                    - Ref: AWS::StackName
                    - "-TrendListConfigs"

  WipeExpiredInteractions:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        "Fn::Join":
          - "-"
          - - Ref: AWS::StackName
            - WipeExpiredInteractions
      Handler: WipeExpiredInteractions-bundle.handler
      Runtime: nodejs10.x
      CodeUri: ./dist/WipeExpiredInteractions-bundle.js
      Description: >-
        Function that is run at regular intervals to remove expired records
      Events:
        ScheduledRule:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
            Enabled: True
      Tracing: Active
      Environment:
        Variables:
          STACK_NAME:
            Ref: AWS::StackName
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "dynamodb:Scan"
                - "dynamodb:DeleteItem"
              Resource:
                "Fn::Join":
                  - ""
                  - - "arn:aws:dynamodb:"
                    - Ref: "AWS::Region"
                    - ":"
                    - Ref: "AWS::AccountId"
                    - ":table/"
                    - Ref: AWS::StackName
                    - "-Interactions"
            - Effect: Allow
              Action:
                - "dynamodb:UpdateItem"
              Resource:
                "Fn::Join":
                  - ""
                  - - "arn:aws:dynamodb:"
                    - Ref: "AWS::Region"
                    - ":"
                    - Ref: "AWS::AccountId"
                    - ":table/"
                    - Ref: AWS::StackName
                    - "-InteractionCounts"

  ########################
  # Custom resources:
  ########################

  TrendListConfigsSeederTrigger:
    Type: Custom::TrendListConfigsSeeder
    Properties:
      ServiceToken: !GetAtt TrendListConfigsSeeder.Arn
    DependsOn:
      - TrendListConfigs
      - TrendListConfigsSeeder
